{"version":3,"sources":["components/IndexItem.js","App.js","reportWebVitals.js","index.js"],"names":["IndexItem","props","className","onClick","OpenNote","id","index","header","text","style","fontSize","margin","date","App","useState","notes","setNotes","noteID","setNoteID","e","console","log","target","selectedNote","selectID","item","PasteAsPlainText","event","preventDefault","clipboardData","getData","document","execCommand","trimSpaces","string","replace","printNotes","i","length","push","newNoteIndex","d","Date","noteDate","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","html","onChange","newNotes","map","note","value","onPaste","filter","newIndex","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.d5d78fff.chunk.js","sourcesContent":["import React from \"react\"\n\nfunction IndexItem(props) {\n    return (\n        <div \n            className=\"index-item\" \n            onClick={props.OpenNote}\n            id={props.index}\n        >\n            <h4 id={props.index}>{props.header}</h4>\n            <p id={props.index}>{props.text}</p>\n            <p style={{fontSize: \".8rem\", margin: \".1rem 0 0 .1rem\"}} id={props.index}>{props.date}</p>\n        </div>\n    )\n}\n\n// style={props.index !== 1 ? {borderTop: \"1px solid black\"} : {border: \"\"}}\n\nexport default IndexItem","import React, { useEffect, useState } from \"react\"\nimport IndexItem from \"./components/IndexItem\"\nimport ContentEditable from \"react-contenteditable\"\nimport './App.css'\n\nfunction App() {\n  const [ notes, setNotes ] = useState([])\n  const [ noteID, setNoteID ] = useState(0)\n\n  // Opens object as note\n  function OpenNote(e) {\n    console.log(\"event: \", e.target)\n    // Get ID\n    const selectID = e.target.id\n    console.log(\"selectedID: \", selectID)\n    // Load ID object to note page\n    let selectedNote\n    for(const item of notes) {\n      if(item.index == selectID) {\n        selectedNote = item\n        console.log(\"selected: \", selectedNote)\n      }\n    }\n    setNoteID(selectedNote.index)\n    console.log(\"noteID: \", noteID)\n  }\n\n  // Creates new note\n  function createNote() {\n    // Get index count\n    let newNoteIndex = 0\n    for(let i = 0; i < notes.length; i++) {\n      if(notes[i].index == newNoteIndex) {\n        newNoteIndex = notes[i].index + 1\n      }\n    }\n    // Get date\n    let d = new Date()\n    let noteDate = `${d.getFullYear()}/${d.getMonth()}/${d.getDate()} ${d.getHours()}:${d.getMinutes()}:${d.getSeconds()}`\n    setNoteID(newNoteIndex)\n    setNotes([...notes, {\n      index: newNoteIndex,\n      header: \"Header\",\n      text: \"Text body\",\n      date: noteDate\n    }])\n    console.log(notes)\n  }\n\n  // Deletes note\n  function deleteNote() {\n    // Map all notes but active note into state\n    let newNotes = notes.filter(note => note.index !== noteID)\n    setNotes(newNotes)\n\n    // Remaps note ID's\n    for(let i = noteID; i < notes.length; i++) {\n      notes[i].index -= 1\n    }\n\n    // Set noteID to next note\n    let newIndex = 0\n    for(let i = 0; i < (notes.length - 1); i++) {\n      newIndex += 1\n    }\n    setNoteID(newIndex)\n  }\n\n  // Removes styling from ctrl+c pasting\n  function PasteAsPlainText (event) {\n    event.preventDefault()\n\n    const text = event.clipboardData.getData(\"text/plain\")\n    document.execCommand(\"insertHTML\", false, text)\n  }\n\n  // Removes & markup from spaces\n  const trimSpaces = (string) => {\n    return string\n      .replace(/&nbsp;/g, ' ')\n      .replace(/&amp;/g, '&')\n      .replace(/&gt;/g, '>')\n      .replace(/&lt;/g, '<')\n  }\n\n  // Populates note index\n  let printNotes = []\n  for(let i = 0; i < notes.length; i++) {\n    printNotes.push(\n      <IndexItem\n        key={notes[i].index}\n        index={notes[i].index} \n        header={notes[i].header} \n        text={notes[i].text} \n        date={notes[i].date}\n        OpenNote={OpenNote}\n      />\n    )\n  }\n\n  // Updates state for selected header in object\n  function changeHeader(e) {\n    let newNotes = notes.map(note => {\n      if(note.index == noteID) {\n        note.header = trimSpaces(e.target.value)\n        return note\n      }\n      return note\n    })\n    setNotes(() => newNotes)\n  }\n\n  // Updates state for selected text body in object\n  function changeText(e) {\n    let newNotes = notes.map(note => {\n      if(note.index == noteID) {\n        note.text = trimSpaces(e.target.value)\n        return note\n      }\n      return note\n    })\n    setNotes(() => newNotes)\n  }\n\n  return (\n    <div className=\"app-container\">\n\n      <div className=\"navbar\">\n        <div className=\"navbar-logo\">\n          <p>SimpleNote</p>\n        </div>\n        <div className=\"new-note\">\n          <span\n            onClick={createNote}\n          >\n            {/* New note */}\n            <p>+</p>\n          </span>\n        </div>\n      </div>\n\n      <div className=\"note-container\">\n        <div className=\"note-index\">\n          {/* Populates index */}\n          {printNotes}\n        </div>\n\n        <div className=\"note-page\">\n          {/* Note editing function */}\n          <ContentEditable  \n            html={notes[noteID] ? notes[noteID].header : null}\n            className=\"content-editable note-header\"\n            onChange={changeHeader}\n            onPaste={PasteAsPlainText}\n          />\n          <ContentEditable  \n            html={notes[noteID] ? notes[noteID].text : null}\n            className=\"content-editable note-text\"\n            onChange={changeText}\n            onPaste={PasteAsPlainText}\n          />\n          <span \n            className=\"note-delete\"\n            onClick={deleteNote}\n          >\n            <p>\n              -\n            </p>\n          </span>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
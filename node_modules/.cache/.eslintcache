[{"/Users/synesis/Documents/Developer/simple-note/simple-note-react/src/index.js":"1","/Users/synesis/Documents/Developer/simple-note/simple-note-react/src/App.js":"2","/Users/synesis/Documents/Developer/simple-note/simple-note-react/src/reportWebVitals.js":"3","/Users/synesis/Documents/Developer/simple-note/simple-note-react/src/components/IndexItem.js":"4","/Users/synesis/Documents/Developer/simple-note/simple-note-react/src/data/NoteDB.js":"5"},{"size":500,"mtime":1614554136535,"results":"6","hashOfConfig":"7"},{"size":4372,"mtime":1614825104805,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":1614554136536,"results":"9","hashOfConfig":"7"},{"size":526,"mtime":1614825104805,"results":"10","hashOfConfig":"7"},{"size":665,"mtime":1614825104805,"results":"11","hashOfConfig":"12"},{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"14pbbfu",{"filePath":"15","messages":"16","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"1u0uklo","/Users/synesis/Documents/Developer/simple-note/simple-note-react/src/index.js",[],"/Users/synesis/Documents/Developer/simple-note/simple-note-react/src/App.js",["25","26","27","28","29"],"import React, { useEffect, useState } from \"react\"\nimport IndexItem from \"./components/IndexItem\"\nimport ContentEditable from \"react-contenteditable\"\nimport './App.css'\n\nfunction App() {\n  const [ notes, setNotes ] = useState([])\n  const [ noteID, setNoteID ] = useState(0)\n\n  // Opens object as note\n  function OpenNote(e) {\n    console.log(\"event: \", e.target)\n    // Get ID\n    const selectID = e.target.id\n    console.log(\"selectedID: \", selectID)\n    // Load ID object to note page\n    let selectedNote\n    for(const item of notes) {\n      if(item.index == selectID) {\n        selectedNote = item\n        console.log(\"selected: \", selectedNote)\n      }\n    }\n    setNoteID(selectedNote.index)\n    console.log(\"noteID: \", noteID)\n  }\n\n  // Creates new note\n  function createNote() {\n    // Get index count\n    let newNoteIndex = 0\n    for(let i = 0; i < notes.length; i++) {\n      if(notes[i].index == newNoteIndex) {\n        newNoteIndex = notes[i].index + 1\n      }\n    }\n    // Get date\n    let d = new Date()\n    let noteDate = `${d.getFullYear()}/${d.getMonth()}/${d.getDate()} ${d.getHours()}:${d.getMinutes()}:${d.getSeconds()}`\n    setNoteID(newNoteIndex)\n    setNotes([...notes, {\n      index: newNoteIndex,\n      header: \"Header\",\n      text: \"Text body\",\n      date: noteDate\n    }])\n    console.log(notes)\n  }\n\n  // Deletes note\n  function deleteNote() {\n    // Map all notes but active note into state\n    let newNotes = notes.filter(note => note.index !== noteID)\n    setNotes(newNotes)\n\n    // Remaps note ID's\n    for(let i = noteID; i < notes.length; i++) {\n      notes[i].index -= 1\n    }\n\n    // Set noteID to next note\n    let newIndex = 0\n    for(let i = 0; i < (notes.length - 1); i++) {\n      newIndex += 1\n    }\n    setNoteID(newIndex)\n  }\n\n  // Removes styling from ctrl+c pasting\n  function PasteAsPlainText (event) {\n    event.preventDefault()\n\n    const text = event.clipboardData.getData(\"text/plain\")\n    document.execCommand(\"insertHTML\", false, text)\n  }\n\n  // Removes & markup from spaces\n  const trimSpaces = (string) => {\n    return string\n      .replace(/&nbsp;/g, ' ')\n      .replace(/&amp;/g, '&')\n      .replace(/&gt;/g, '>')\n      .replace(/&lt;/g, '<')\n  }\n\n  // Populates note index\n  let printNotes = []\n  for(let i = 0; i < notes.length; i++) {\n    printNotes.push(\n      <IndexItem\n        key={notes[i].index}\n        index={notes[i].index} \n        header={notes[i].header} \n        text={notes[i].text} \n        date={notes[i].date}\n        OpenNote={OpenNote}\n      />\n    )\n  }\n\n  // Updates state for selected header in object\n  function changeHeader(e) {\n    let newNotes = notes.map(note => {\n      if(note.index == noteID) {\n        note.header = trimSpaces(e.target.value)\n        return note\n      }\n      return note\n    })\n    setNotes(() => newNotes)\n  }\n\n  // Updates state for selected text body in object\n  function changeText(e) {\n    let newNotes = notes.map(note => {\n      if(note.index == noteID) {\n        note.text = trimSpaces(e.target.value)\n        return note\n      }\n      return note\n    })\n    setNotes(() => newNotes)\n  }\n\n  return (\n    <div className=\"app-container\">\n\n      <div className=\"navbar\">\n        <div className=\"navbar-logo\">\n          <p>SimpleNote</p>\n        </div>\n        <div className=\"new-note\">\n          <span\n            onClick={createNote}\n          >\n            {/* New note */}\n            <p>+</p>\n          </span>\n        </div>\n      </div>\n\n      <div className=\"note-container\">\n        <div className=\"note-index\">\n          {/* Populates index */}\n          {printNotes}\n        </div>\n\n        <div className=\"note-page\">\n          {/* Note editing function */}\n          <ContentEditable  \n            html={notes[noteID] ? notes[noteID].header : null}\n            className=\"content-editable note-header\"\n            onChange={changeHeader}\n            onPaste={PasteAsPlainText}\n          />\n          <ContentEditable  \n            html={notes[noteID] ? notes[noteID].text : null}\n            className=\"content-editable note-text\"\n            onChange={changeText}\n            onPaste={PasteAsPlainText}\n          />\n          <span \n            className=\"note-delete\"\n            onClick={deleteNote}\n          >\n            <p>\n              -\n            </p>\n          </span>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","/Users/synesis/Documents/Developer/simple-note/simple-note-react/src/reportWebVitals.js",[],"/Users/synesis/Documents/Developer/simple-note/simple-note-react/src/components/IndexItem.js",[],"/Users/synesis/Documents/Developer/simple-note/simple-note-react/src/data/NoteDB.js",[],["30","31"],{"ruleId":"32","severity":1,"message":"33","line":1,"column":17,"nodeType":"34","messageId":"35","endLine":1,"endColumn":26},{"ruleId":"36","severity":1,"message":"37","line":19,"column":21,"nodeType":"38","messageId":"39","endLine":19,"endColumn":23},{"ruleId":"36","severity":1,"message":"37","line":33,"column":25,"nodeType":"38","messageId":"39","endLine":33,"endColumn":27},{"ruleId":"36","severity":1,"message":"37","line":104,"column":21,"nodeType":"38","messageId":"39","endLine":104,"endColumn":23},{"ruleId":"36","severity":1,"message":"37","line":116,"column":21,"nodeType":"38","messageId":"39","endLine":116,"endColumn":23},{"ruleId":"40","replacedBy":"41"},{"ruleId":"42","replacedBy":"43"},"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-native-reassign",["44"],"no-negated-in-lhs",["45"],"no-global-assign","no-unsafe-negation"]
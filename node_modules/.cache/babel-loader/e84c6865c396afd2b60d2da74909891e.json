{"ast":null,"code":"var _jsxFileName = \"/Users/synesis/Documents/Developer/simple-note/simple-note-react/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport IndexItem from \"./components/IndexItem\";\nimport ContentEditable from \"react-contenteditable\";\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [notes, setNotes] = useState([]);\n  const [noteID, setNoteID] = useState(0); // Opens object as note\n\n  function OpenNote(e) {\n    console.log(\"event: \", e.target); // Get ID\n\n    const selectID = e.target.id;\n    console.log(\"selectedID: \", selectID); // Load ID object to note page\n\n    let selectedNote;\n\n    for (const item of notes) {\n      if (item.index == selectID) {\n        selectedNote = item;\n        console.log(\"selected: \", selectedNote);\n      }\n    }\n\n    setNoteID(selectedNote.index);\n    console.log(\"noteID: \", noteID);\n  } // Creates new note\n\n\n  function createNote() {\n    // Get index count\n    let newNoteIndex = 1;\n\n    for (let i = 0; i < notes.length; i++) {\n      if (notes[i].index == newNoteIndex) {\n        newNoteIndex = notes[i].index + 1;\n      }\n    } // Get date\n\n\n    let d = new Date();\n    let noteDate = `${d.getFullYear()}/${d.getMonth()}/${d.getDate()} ${d.getHours()}:${d.getMinutes()}:${d.getSeconds()}`;\n    setNoteID(newNoteIndex);\n    setNotes([...notes, {\n      index: newNoteIndex,\n      header: \"Header\",\n      text: \"Text body\",\n      date: noteDate\n    }]);\n    console.log(notes);\n  } // Deletes note\n\n\n  function deleteNote() {\n    // Map all notes but active note into state\n    let newNotes = notes.filter(note => note.index !== noteID);\n    setNotes(newNotes); // Remaps note ID's\n\n    for (let i = noteID; i < notes.length; i++) {\n      notes[i].index -= 1;\n    } // Set noteID to next note\n\n\n    let newIndex = 0;\n\n    for (let i = 0; i < notes.length - 1; i++) {\n      newIndex += 1;\n    }\n\n    setNoteID(newIndex);\n  } // Removes styling from ctrl+c pasting\n\n\n  function PasteAsPlainText(event) {\n    event.preventDefault();\n    const text = event.clipboardData.getData(\"text/plain\");\n    document.execCommand(\"insertHTML\", false, text);\n  } // Removes & markup from spaces\n\n\n  const trimSpaces = string => {\n    return string.replace(/&nbsp;/g, ' ').replace(/&amp;/g, '&').replace(/&gt;/g, '>').replace(/&lt;/g, '<');\n  }; // Populates note index\n\n\n  let printNotes = [];\n\n  for (let i = 0; i < notes.length; i++) {\n    printNotes.push( /*#__PURE__*/_jsxDEV(IndexItem, {\n      index: notes[i].index,\n      header: notes[i].header,\n      text: notes[i].text,\n      date: notes[i].date,\n      OpenNote: OpenNote\n    }, notes[i].index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this));\n  } // Updates state for selected header in object\n\n\n  function changeHeader(e) {\n    let newNotes = notes.map(note => {\n      if (note.index == noteID) {\n        note.header = trimSpaces(e.target.value);\n        return note;\n      }\n\n      return note;\n    });\n    setNotes(() => newNotes);\n  } // Updates state for selected text body in object\n\n\n  function changeText(e) {\n    let newNotes = notes.map(note => {\n      if (note.index == noteID) {\n        note.text = trimSpaces(e.target.value);\n        return note;\n      }\n\n      return note;\n    });\n    setNotes(() => newNotes);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"navbar\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"navbar-logo\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"SimpleNote\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-note\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          onClick: createNote,\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"+\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"note-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"note-index\",\n        children: printNotes\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"note-page\",\n        children: [/*#__PURE__*/_jsxDEV(ContentEditable, {\n          html: notes[noteID - 1] ? notes[noteID].header : null,\n          className: \"content-editable note-header\",\n          onChange: changeHeader,\n          onPaste: PasteAsPlainText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ContentEditable, {\n          html: notes[noteID - 1] ? notes[noteID].text : null,\n          className: \"content-editable note-text\",\n          onChange: changeText,\n          onPaste: PasteAsPlainText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"note-delete\",\n          onClick: deleteNote,\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"-\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 126,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"bml/TzyAEi2Uhcm0JSf+2MKj9yo=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/synesis/Documents/Developer/simple-note/simple-note-react/src/App.js"],"names":["React","useEffect","useState","IndexItem","ContentEditable","App","notes","setNotes","noteID","setNoteID","OpenNote","e","console","log","target","selectID","id","selectedNote","item","index","createNote","newNoteIndex","i","length","d","Date","noteDate","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","header","text","date","deleteNote","newNotes","filter","note","newIndex","PasteAsPlainText","event","preventDefault","clipboardData","getData","document","execCommand","trimSpaces","string","replace","printNotes","push","changeHeader","map","value","changeText"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\"\nimport IndexItem from \"./components/IndexItem\"\nimport ContentEditable from \"react-contenteditable\"\nimport './App.css'\n\nfunction App() {\n  const [ notes, setNotes ] = useState([])\n  const [ noteID, setNoteID ] = useState(0)\n\n  // Opens object as note\n  function OpenNote(e) {\n    console.log(\"event: \", e.target)\n    // Get ID\n    const selectID = e.target.id\n    console.log(\"selectedID: \", selectID)\n    // Load ID object to note page\n    let selectedNote\n    for(const item of notes) {\n      if(item.index == selectID) {\n        selectedNote = item\n        console.log(\"selected: \", selectedNote)\n      }\n    }\n    setNoteID(selectedNote.index)\n    console.log(\"noteID: \", noteID)\n  }\n\n  // Creates new note\n  function createNote() {\n    // Get index count\n    let newNoteIndex = 1\n    for(let i = 0; i < notes.length; i++) {\n      if(notes[i].index == newNoteIndex) {\n        newNoteIndex = notes[i].index + 1\n      }\n    }\n    // Get date\n    let d = new Date()\n    let noteDate = `${d.getFullYear()}/${d.getMonth()}/${d.getDate()} ${d.getHours()}:${d.getMinutes()}:${d.getSeconds()}`\n    setNoteID(newNoteIndex)\n    setNotes([...notes, {\n      index: newNoteIndex,\n      header: \"Header\",\n      text: \"Text body\",\n      date: noteDate\n    }])\n    console.log(notes)\n  }\n\n  // Deletes note\n  function deleteNote() {\n    // Map all notes but active note into state\n    let newNotes = notes.filter(note => note.index !== noteID)\n    setNotes(newNotes)\n\n    // Remaps note ID's\n    for(let i = noteID; i < notes.length; i++) {\n      notes[i].index -= 1\n    }\n\n    // Set noteID to next note\n    let newIndex = 0\n    for(let i = 0; i < (notes.length - 1); i++) {\n      newIndex += 1\n    }\n    setNoteID(newIndex)\n  }\n\n  // Removes styling from ctrl+c pasting\n  function PasteAsPlainText (event) {\n    event.preventDefault()\n\n    const text = event.clipboardData.getData(\"text/plain\")\n    document.execCommand(\"insertHTML\", false, text)\n  }\n\n  // Removes & markup from spaces\n  const trimSpaces = (string) => {\n    return string\n      .replace(/&nbsp;/g, ' ')\n      .replace(/&amp;/g, '&')\n      .replace(/&gt;/g, '>')\n      .replace(/&lt;/g, '<')\n  }\n\n  // Populates note index\n  let printNotes = []\n  for(let i = 0; i < notes.length; i++) {\n    printNotes.push(\n      <IndexItem\n        key={notes[i].index}\n        index={notes[i].index} \n        header={notes[i].header} \n        text={notes[i].text} \n        date={notes[i].date}\n        OpenNote={OpenNote}\n      />\n    )\n  }\n\n  // Updates state for selected header in object\n  function changeHeader(e) {\n    let newNotes = notes.map(note => {\n      if(note.index == noteID) {\n        note.header = trimSpaces(e.target.value)\n        return note\n      }\n      return note\n    })\n    setNotes(() => newNotes)\n  }\n\n  // Updates state for selected text body in object\n  function changeText(e) {\n    let newNotes = notes.map(note => {\n      if(note.index == noteID) {\n        note.text = trimSpaces(e.target.value)\n        return note\n      }\n      return note\n    })\n    setNotes(() => newNotes)\n  }\n\n  return (\n    <div className=\"app-container\">\n\n      <div className=\"navbar\">\n        <div className=\"navbar-logo\">\n          <p>SimpleNote</p>\n        </div>\n        <div className=\"new-note\">\n          <span\n            onClick={createNote}\n          >\n            {/* New note */}\n            <p>+</p>\n          </span>\n        </div>\n      </div>\n\n      <div className=\"note-container\">\n        <div className=\"note-index\">\n          {/* Populates index */}\n          {printNotes}\n        </div>\n\n        <div className=\"note-page\">\n          {/* Note editing function */}\n          <ContentEditable  \n            html={notes[noteID - 1] ? notes[noteID].header : null}\n            className=\"content-editable note-header\"\n            onChange={changeHeader}\n            onPaste={PasteAsPlainText}\n          />\n          <ContentEditable  \n            html={notes[noteID - 1] ? notes[noteID].text : null}\n            className=\"content-editable note-text\"\n            onChange={changeText}\n            onPaste={PasteAsPlainText}\n          />\n          <span \n            className=\"note-delete\"\n            onClick={deleteNote}\n          >\n            <p>\n              -\n            </p>\n          </span>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}
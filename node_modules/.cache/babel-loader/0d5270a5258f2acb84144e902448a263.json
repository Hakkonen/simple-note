{"ast":null,"code":"var _jsxFileName = \"/Users/synesis/Documents/Developer/simple-note/simple-note-react/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport IndexItem from \"./components/IndexItem\";\nimport ContentEditable from \"react-contenteditable\";\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [notes, setNotes] = useState([// {\n    //   index: 0,\n    //   header: \"World, hello!\",\n    //   text: \"Hello world\",\n    // },\n    // {\n    //     index: 1,\n    //     header: \"Hello there guvna what's it about\",\n    //     text: \"Test note\"\n    // },\n    // {\n    //     index: 2,\n    //     header: \"My note\",\n    //     text: \"Pop a testie\"\n    // }\n  ]);\n  const [noteID, setNoteID] = useState(0);\n  const [header, setHeader] = useState(\"\");\n  const [text, setText] = useState(\"\"); // Opens object as note\n\n  function OpenNote(e) {\n    // Get ID\n    const selectID = e.target.id; // Load ID object to note page\n\n    let selectedNote;\n\n    for (const item of notes) {\n      if (item.index == selectID) {\n        selectedNote = item;\n      }\n    }\n\n    console.log(selectedNote);\n    setNoteID(() => selectedNote.index);\n    setHeader(() => selectedNote.header);\n    setText(() => selectedNote.text);\n  } // Creates new note\n\n\n  function createNote() {} // Removes styling from ctrl+c pasting\n\n\n  function PasteAsPlainText(event) {\n    event.preventDefault();\n    const text = event.clipboardData.getData(\"text/plain\");\n    document.execCommand(\"insertHTML\", false, text);\n  } // Removes & markup from spaces\n\n\n  const trimSpaces = string => {\n    return string.replace(/&nbsp;/g, ' ').replace(/&amp;/g, '&').replace(/&gt;/g, '>').replace(/&lt;/g, '<');\n  }; // Populates note index\n\n\n  let printNotes = [];\n\n  for (let i = 0; i < notes.length; i++) {\n    printNotes.push( /*#__PURE__*/_jsxDEV(IndexItem, {\n      index: notes[i].index,\n      header: notes[i].header,\n      text: notes[i].text,\n      OpenNote: OpenNote\n    }, notes[i].index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this));\n  } // Updates state for selected header in object\n\n\n  function changeHeader(e) {\n    let newNotes = notes.map(note => {\n      if (note.index == noteID) {\n        note.header = trimSpaces(e.target.value);\n        return note;\n      }\n\n      return note;\n    });\n    setNotes(() => newNotes);\n  } // Updates state for selected text body in object\n\n\n  function changeText(e) {\n    let newNotes = notes.map(note => {\n      if (note.index == noteID) {\n        note.text = trimSpaces(e.target.value);\n        return note;\n      }\n\n      return note;\n    });\n    setNotes(() => newNotes);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"navbar\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"navbar-logo\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"SimpleNote\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-note\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"+\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"note-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"note-index\",\n        children: printNotes\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"note-page\",\n        children: [/*#__PURE__*/_jsxDEV(ContentEditable, {\n          html: notes[noteID] ? notes[noteID].header : null,\n          className: \"content-editable note-header\" // onChange={e => setHeader(e.target.value)}\n          ,\n          onChange: changeHeader,\n          onPaste: PasteAsPlainText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ContentEditable, {\n          html: notes[noteID] ? notes[noteID].text : null,\n          className: \"content-editable note-text\",\n          onChange: changeText,\n          onPaste: PasteAsPlainText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"peQMMuhsBKxzHRlAy3kL7mAvhlQ=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/synesis/Documents/Developer/simple-note/simple-note-react/src/App.js"],"names":["React","useEffect","useState","IndexItem","ContentEditable","App","notes","setNotes","noteID","setNoteID","header","setHeader","text","setText","OpenNote","e","selectID","target","id","selectedNote","item","index","console","log","createNote","PasteAsPlainText","event","preventDefault","clipboardData","getData","document","execCommand","trimSpaces","string","replace","printNotes","i","length","push","changeHeader","newNotes","map","note","value","changeText"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\"\nimport IndexItem from \"./components/IndexItem\"\nimport ContentEditable from \"react-contenteditable\"\nimport './App.css'\n\nfunction App() {\n  const [ notes, setNotes ] = useState([\n    // {\n    //   index: 0,\n    //   header: \"World, hello!\",\n    //   text: \"Hello world\",\n    // },\n    // {\n    //     index: 1,\n    //     header: \"Hello there guvna what's it about\",\n    //     text: \"Test note\"\n    // },\n    // {\n    //     index: 2,\n    //     header: \"My note\",\n    //     text: \"Pop a testie\"\n    // }\n  ])\n  const [ noteID, setNoteID ] = useState(0)\n  const [ header, setHeader ] = useState(\"\")\n  const [ text, setText ] = useState(\"\")\n\n  // Opens object as note\n  function OpenNote(e) {\n    // Get ID\n    const selectID = e.target.id\n    // Load ID object to note page\n    let selectedNote\n    for(const item of notes) {\n      if(item.index == selectID) {\n        selectedNote = item\n      }\n    }\n    console.log(selectedNote)\n    setNoteID(() => selectedNote.index)\n    setHeader(() => selectedNote.header)\n    setText(() => selectedNote.text)\n  }\n\n  // Creates new note\n  function createNote() {\n    \n  }\n\n  // Removes styling from ctrl+c pasting\n  function PasteAsPlainText (event) {\n    event.preventDefault()\n\n    const text = event.clipboardData.getData(\"text/plain\")\n    document.execCommand(\"insertHTML\", false, text)\n  }\n\n  // Removes & markup from spaces\n  const trimSpaces = (string) => {\n    return string\n      .replace(/&nbsp;/g, ' ')\n      .replace(/&amp;/g, '&')\n      .replace(/&gt;/g, '>')\n      .replace(/&lt;/g, '<')\n  }\n\n  // Populates note index\n  let printNotes = []\n  for(let i = 0; i < notes.length; i++) {\n    printNotes.push(\n      <IndexItem\n        key={notes[i].index}\n        index={notes[i].index} \n        header={notes[i].header} \n        text={notes[i].text} \n        OpenNote={OpenNote}\n      />\n    )\n  }\n\n  // Updates state for selected header in object\n  function changeHeader(e) {\n    let newNotes = notes.map(note => {\n      if(note.index == noteID) {\n        note.header = trimSpaces(e.target.value)\n        return note\n      }\n      return note\n    })\n    setNotes(() => newNotes)\n  }\n\n  // Updates state for selected text body in object\n  function changeText(e) {\n    let newNotes = notes.map(note => {\n      if(note.index == noteID) {\n        note.text = trimSpaces(e.target.value)\n        return note\n      }\n      return note\n    })\n    setNotes(() => newNotes)\n  }\n\n  return (\n    <div className=\"app-container\">\n\n      <div className=\"navbar\">\n        <div className=\"navbar-logo\">\n          <p>SimpleNote</p>\n        </div>\n        <div className=\"new-note\">\n          <span>\n            {/* New note */}\n            <p>+</p>\n          </span>\n        </div>\n      </div>\n\n      <div className=\"note-container\">\n        <div className=\"note-index\">\n          {/* Populates index */}\n          {printNotes}\n        </div>\n\n        <div className=\"note-page\">\n          {/* Note editing function */}\n          <ContentEditable  \n            html={notes[noteID] ? notes[noteID].header : null}\n            className=\"content-editable note-header\"\n            // onChange={e => setHeader(e.target.value)}\n            onChange={changeHeader}\n            onPaste={PasteAsPlainText}\n          />\n          <ContentEditable  \n            html={notes[noteID] ? notes[noteID].text : null}\n            className=\"content-editable note-text\"\n            onChange={changeText}\n            onPaste={PasteAsPlainText}\n          />\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}
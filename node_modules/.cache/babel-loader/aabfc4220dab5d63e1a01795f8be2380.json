{"ast":null,"code":"var _jsxFileName = \"/Users/synesis/Documents/Developer/simple-note/simple-note-react/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport IndexItem from \"./components/IndexItem\";\nimport ContentEditable from \"react-contenteditable\";\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [notes, setNotes] = useState([]);\n  const [noteID, setNoteID] = useState(0);\n  const [header, setHeader] = useState(\"\");\n  const [text, setText] = useState(\"\"); // Opens object as note\n\n  function OpenNote(e) {\n    // Get ID\n    const selectID = e.target.id; // Load ID object to note page\n\n    let selectedNote;\n\n    for (const item of notes) {\n      if (item.index == selectID) {\n        selectedNote = item;\n      }\n    }\n\n    console.log(selectedNote);\n    setNoteID(() => selectedNote.index);\n    setHeader(() => selectedNote.header);\n    setText(() => selectedNote.text);\n  } // Creates new note\n\n\n  function createNote() {\n    // Get index count\n    let newNoteIndex = 1;\n\n    for (let i = 0; i < notes.length; i++) {\n      if (notes[i].index > newNoteIndex) {\n        newNoteIndex = notes[i].index + 1;\n      }\n    } // Get date\n\n\n    let d = new Date();\n    let noteDate = `${d.getFullYear()}/${d.getMonth()}/${d.getDate()} ${d.getHours()}:${d.getMinutes()}:${d.getSeconds()}`;\n    setNoteID(newNoteIndex);\n    setNotes([...notes, {\n      index: newNoteIndex,\n      header: \"Header\",\n      text: \"Text body\",\n      date: noteDate\n    }]);\n    console.log(notes);\n  } // Deletes note\n\n\n  function deleteNote() {\n    console.log(\"noteID: \", noteID); // Map all notes but active note into state\n\n    let newNotes = notes.filter(note => note.index !== noteID);\n    console.log(newNotes);\n    setNotes(newNotes); // Set noteID to next note\n\n    let newIndex = 0;\n\n    for (let i = 0; i < notes.length - 1; i++) {\n      newIndex += 1;\n    }\n\n    setNoteID(newIndex);\n    console.log(\"index: \", newIndex);\n  } // Removes styling from ctrl+c pasting\n\n\n  function PasteAsPlainText(event) {\n    event.preventDefault();\n    const text = event.clipboardData.getData(\"text/plain\");\n    document.execCommand(\"insertHTML\", false, text);\n  } // Removes & markup from spaces\n\n\n  const trimSpaces = string => {\n    return string.replace(/&nbsp;/g, ' ').replace(/&amp;/g, '&').replace(/&gt;/g, '>').replace(/&lt;/g, '<');\n  }; // Populates note index\n\n\n  let printNotes = [];\n\n  for (let i = 0; i < notes.length; i++) {\n    printNotes.push( /*#__PURE__*/_jsxDEV(IndexItem, {\n      index: notes[i].index,\n      header: notes[i].header,\n      text: notes[i].text,\n      date: notes[i].date,\n      OpenNote: OpenNote\n    }, notes[i].index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this));\n  } // Updates state for selected header in object\n\n\n  function changeHeader(e) {\n    let newNotes = notes.map(note => {\n      if (note.index == noteID) {\n        note.header = trimSpaces(e.target.value);\n        return note;\n      }\n\n      return note;\n    });\n    setNotes(() => newNotes);\n  } // Updates state for selected text body in object\n\n\n  function changeText(e) {\n    let newNotes = notes.map(note => {\n      if (note.index == noteID) {\n        note.text = trimSpaces(e.target.value);\n        return note;\n      }\n\n      return note;\n    });\n    setNotes(() => newNotes);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"navbar\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"navbar-logo\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"SimpleNote\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-note\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          onClick: createNote,\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"+\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"note-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"note-index\",\n        children: printNotes\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"note-page\",\n        children: [/*#__PURE__*/_jsxDEV(ContentEditable, {\n          html: notes[noteID] ? notes[noteID].header : null,\n          className: \"content-editable note-header\",\n          onChange: changeHeader,\n          onPaste: PasteAsPlainText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ContentEditable, {\n          html: notes[noteID] ? notes[noteID].text : null,\n          className: \"content-editable note-text\",\n          onChange: changeText,\n          onPaste: PasteAsPlainText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"note-delete\",\n          onClick: deleteNote,\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"-\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 125,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"cBPFRp20BlK/ckOSpB7qKCW31mc=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/synesis/Documents/Developer/simple-note/simple-note-react/src/App.js"],"names":["React","useEffect","useState","IndexItem","ContentEditable","App","notes","setNotes","noteID","setNoteID","header","setHeader","text","setText","OpenNote","e","selectID","target","id","selectedNote","item","index","console","log","createNote","newNoteIndex","i","length","d","Date","noteDate","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","date","deleteNote","newNotes","filter","note","newIndex","PasteAsPlainText","event","preventDefault","clipboardData","getData","document","execCommand","trimSpaces","string","replace","printNotes","push","changeHeader","map","value","changeText"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\"\nimport IndexItem from \"./components/IndexItem\"\nimport ContentEditable from \"react-contenteditable\"\nimport './App.css'\n\nfunction App() {\n  const [ notes, setNotes ] = useState([])\n  const [ noteID, setNoteID ] = useState(0)\n  const [ header, setHeader ] = useState(\"\")\n  const [ text, setText ] = useState(\"\")\n\n  // Opens object as note\n  function OpenNote(e) {\n    // Get ID\n    const selectID = e.target.id\n    // Load ID object to note page\n    let selectedNote\n    for(const item of notes) {\n      if(item.index == selectID) {\n        selectedNote = item\n      }\n    }\n    console.log(selectedNote)\n    setNoteID(() => selectedNote.index)\n    setHeader(() => selectedNote.header)\n    setText(() => selectedNote.text)\n  }\n\n  // Creates new note\n  function createNote() {\n    // Get index count\n    let newNoteIndex = 1\n    for(let i = 0; i < notes.length; i++) {\n      if(notes[i].index > newNoteIndex) {\n        newNoteIndex = notes[i].index + 1\n      }\n    }\n    // Get date\n    let d = new Date()\n    let noteDate = `${d.getFullYear()}/${d.getMonth()}/${d.getDate()} ${d.getHours()}:${d.getMinutes()}:${d.getSeconds()}`\n    setNoteID(newNoteIndex)\n    setNotes([...notes, {\n      index: newNoteIndex,\n      header: \"Header\",\n      text: \"Text body\",\n      date: noteDate\n    }])\n    console.log(notes)\n  }\n\n  // Deletes note\n  function deleteNote() {\n    console.log(\"noteID: \", noteID)\n    // Map all notes but active note into state\n    let newNotes = notes.filter(note => note.index !== noteID)\n    console.log(newNotes)\n    setNotes(newNotes)\n\n    // Set noteID to next note\n    let newIndex = 0\n    for(let i = 0; i < (notes.length - 1); i++) {\n      newIndex += 1\n    }\n    setNoteID(newIndex)\n    console.log(\"index: \", newIndex)\n  }\n\n  // Removes styling from ctrl+c pasting\n  function PasteAsPlainText (event) {\n    event.preventDefault()\n\n    const text = event.clipboardData.getData(\"text/plain\")\n    document.execCommand(\"insertHTML\", false, text)\n  }\n\n  // Removes & markup from spaces\n  const trimSpaces = (string) => {\n    return string\n      .replace(/&nbsp;/g, ' ')\n      .replace(/&amp;/g, '&')\n      .replace(/&gt;/g, '>')\n      .replace(/&lt;/g, '<')\n  }\n\n  // Populates note index\n  let printNotes = []\n  for(let i = 0; i < notes.length; i++) {\n    printNotes.push(\n      <IndexItem\n        key={notes[i].index}\n        index={notes[i].index} \n        header={notes[i].header} \n        text={notes[i].text} \n        date={notes[i].date}\n        OpenNote={OpenNote}\n      />\n    )\n  }\n\n  // Updates state for selected header in object\n  function changeHeader(e) {\n    let newNotes = notes.map(note => {\n      if(note.index == noteID) {\n        note.header = trimSpaces(e.target.value)\n        return note\n      }\n      return note\n    })\n    setNotes(() => newNotes)\n  }\n\n  // Updates state for selected text body in object\n  function changeText(e) {\n    let newNotes = notes.map(note => {\n      if(note.index == noteID) {\n        note.text = trimSpaces(e.target.value)\n        return note\n      }\n      return note\n    })\n    setNotes(() => newNotes)\n  }\n\n  return (\n    <div className=\"app-container\">\n\n      <div className=\"navbar\">\n        <div className=\"navbar-logo\">\n          <p>SimpleNote</p>\n        </div>\n        <div className=\"new-note\">\n          <span\n            onClick={createNote}\n          >\n            {/* New note */}\n            <p>+</p>\n          </span>\n        </div>\n      </div>\n\n      <div className=\"note-container\">\n        <div className=\"note-index\">\n          {/* Populates index */}\n          {printNotes}\n        </div>\n\n        <div className=\"note-page\">\n          {/* Note editing function */}\n          <ContentEditable  \n            html={notes[noteID] ? notes[noteID].header : null}\n            className=\"content-editable note-header\"\n            onChange={changeHeader}\n            onPaste={PasteAsPlainText}\n          />\n          <ContentEditable  \n            html={notes[noteID] ? notes[noteID].text : null}\n            className=\"content-editable note-text\"\n            onChange={changeText}\n            onPaste={PasteAsPlainText}\n          />\n          <span \n            className=\"note-delete\"\n            onClick={deleteNote}\n          >\n            <p>\n              -\n            </p>\n          </span>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}